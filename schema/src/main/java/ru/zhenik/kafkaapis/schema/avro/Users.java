/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package ru.zhenik.kafkaapis.schema.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** User list */
@org.apache.avro.specific.AvroGenerated
public class Users extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 312372040238090937L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Users\",\"namespace\":\"ru.zhenik.kafkaapis.schema.avro\",\"doc\":\"User list\",\"fields\":[{\"name\":\"list\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"user id\"}]}}],\"doc\":\"List of users\",\"default\":null}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Users> ENCODER =
      new BinaryMessageEncoder<Users>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Users> DECODER =
      new BinaryMessageDecoder<Users>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Users> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Users> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Users>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Users to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Users from a ByteBuffer. */
  public static Users fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** List of users */
   private java.util.List<ru.zhenik.kafkaapis.schema.avro.User> list;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Users() {}

  /**
   * All-args constructor.
   * @param list List of users
   */
  public Users(java.util.List<ru.zhenik.kafkaapis.schema.avro.User> list) {
    this.list = list;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return list;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: list = (java.util.List<ru.zhenik.kafkaapis.schema.avro.User>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'list' field.
   * @return List of users
   */
  public java.util.List<ru.zhenik.kafkaapis.schema.avro.User> getList() {
    return list;
  }


  /**
   * Creates a new Users RecordBuilder.
   * @return A new Users RecordBuilder
   */
  public static ru.zhenik.kafkaapis.schema.avro.Users.Builder newBuilder() {
    return new ru.zhenik.kafkaapis.schema.avro.Users.Builder();
  }

  /**
   * Creates a new Users RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Users RecordBuilder
   */
  public static ru.zhenik.kafkaapis.schema.avro.Users.Builder newBuilder(ru.zhenik.kafkaapis.schema.avro.Users.Builder other) {
    return new ru.zhenik.kafkaapis.schema.avro.Users.Builder(other);
  }

  /**
   * Creates a new Users RecordBuilder by copying an existing Users instance.
   * @param other The existing instance to copy.
   * @return A new Users RecordBuilder
   */
  public static ru.zhenik.kafkaapis.schema.avro.Users.Builder newBuilder(ru.zhenik.kafkaapis.schema.avro.Users other) {
    return new ru.zhenik.kafkaapis.schema.avro.Users.Builder(other);
  }

  /**
   * RecordBuilder for Users instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Users>
    implements org.apache.avro.data.RecordBuilder<Users> {

    /** List of users */
    private java.util.List<ru.zhenik.kafkaapis.schema.avro.User> list;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ru.zhenik.kafkaapis.schema.avro.Users.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.list)) {
        this.list = data().deepCopy(fields()[0].schema(), other.list);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Users instance
     * @param other The existing instance to copy.
     */
    private Builder(ru.zhenik.kafkaapis.schema.avro.Users other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.list)) {
        this.list = data().deepCopy(fields()[0].schema(), other.list);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'list' field.
      * List of users
      * @return The value.
      */
    public java.util.List<ru.zhenik.kafkaapis.schema.avro.User> getList() {
      return list;
    }

    /**
      * Sets the value of the 'list' field.
      * List of users
      * @param value The value of 'list'.
      * @return This builder.
      */
    public ru.zhenik.kafkaapis.schema.avro.Users.Builder setList(java.util.List<ru.zhenik.kafkaapis.schema.avro.User> value) {
      validate(fields()[0], value);
      this.list = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'list' field has been set.
      * List of users
      * @return True if the 'list' field has been set, false otherwise.
      */
    public boolean hasList() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'list' field.
      * List of users
      * @return This builder.
      */
    public ru.zhenik.kafkaapis.schema.avro.Users.Builder clearList() {
      list = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Users build() {
      try {
        Users record = new Users();
        record.list = fieldSetFlags()[0] ? this.list : (java.util.List<ru.zhenik.kafkaapis.schema.avro.User>) defaultValue(fields()[0]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Users>
    WRITER$ = (org.apache.avro.io.DatumWriter<Users>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Users>
    READER$ = (org.apache.avro.io.DatumReader<Users>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

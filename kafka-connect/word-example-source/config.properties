name=mq-source
connector.class=com.ibm.eventstreams.connect.mqsource.MQSourceConnector
# The name of the target Kafka topic - required
topic=word-ibmmq-v1

# You can increase this for higher throughput, but message ordering will be lost
tasks.max=1

# The name of the MQ queue manager - required
mq.queue.manager=QM1

# The connection mode to connect to MQ - client (default) or bindings - optional
# mq.connection.mode=client
mq.connection.mode=bindings

# A list of one or more host(port) entries for connecting to the queue manager. Entries are separated with a comma - required (unless using bindings or CCDT)
mq.connection.name.list=localhost(1414)

# The name of the server-connection channel - required (unless using bindings or CCDT)
mq.channel.name=DEV.APP.SVRCONN

# The name of the source MQ queue - required
mq.queue=DEV.QUEUE.1

# The user name for authenticating with the queue manager - optional
# mq.user.name=

# The password for authenticating with the queue manager - optional
# mq.password=

# Alternatively can use a ConfigProvider for externalising secrets (see README.md for more details)
# Variable references are of the form ${provider:[path:]key} where the path is optional,
# depending on the ConfigProvider implementation.
# mq.password=${file:/var/run/secret.properties:secret-key}

# The CCDT URL to use to establish a client connection to the queue manager - optional
# mq.ccdt.url=

# The record builders control conversion of data between the messages in MQ and the internal Kafka Connect representation - required
mq.record.builder=com.ibm.eventstreams.connect.mqsource.builders.DefaultRecordBuilder
# mq.record.builder=com.ibm.eventstreams.connect.mqsource.builders.JsonRecordBuilder

# Whether to interpret the message body as a JMS message type (default false) - optional
# mq.message.body.jms=
mq.message.body.jms=true


# The JMS message header to use as the Kafka record key - optional
# Valid values are JMSMessageID, JMSCorrelationID and JMSCorrelationIDAsBytes
# Don't forget to set key.converter to a compatible converter as described in README.md
# mq.record.builder.key.header=

# The name of the cipher suite for TLS (SSL) connection (default blank, meaning do not use TLS) - optional
# See https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_9.1.0/com.ibm.mq.dev.doc/q113220_.htm for valid values
# mq.ssl.cipher.suite=

# The distinguished name pattern of the TLS (SSL) peer - optional
# mq.ssl.peer.name=



# The converters control conversion of data between the internal Kafka Connect representation and the messages in Kafka.
# key.converter=org.apache.kafka.connect.converters.ByteArrayConverter
# key.converter=org.apache.kafka.connect.storage.StringConverter
# key.converter=org.apache.kafka.connect.json.JsonConverter

#value.converter=org.apache.kafka.connect.converters.ByteArrayConverter
value.converter=org.apache.kafka.connect.storage.StringConverter
# value.converter=org.apache.kafka.connect.json.JsonConverter